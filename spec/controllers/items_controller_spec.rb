require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ItemsController do
  # This should return the minimal set of attributes required to create a valid
  # Item. As you add validations to Item, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :description => "description", 
      :title => "title"
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ItemsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do  
    login_user
    it "should get index" do
      # Note, rails 3.x scaffolding may add lines like get :index, {}, valid_session
      # the valid_session overrides the devise login. Remove the valid_session from your specs
      user = subject.current_user
      get :index, :format => :json
      response.should be_success
    end
  end

  describe "GET show" do
    login_user
    it "assigns the requested item as @item" do
      item = Item.create! valid_attributes
      user = subject.current_user
      user.items << item
      user.save
      get :show, {:format => :json, :id => item.to_param}
      expected = subject.send(:convert_to_json, item)
      response.body.should == expected.to_json
    end
  end

  describe "POST create" do
    describe "with valid params" do
      login_user
      it "creates a new Item" do
        user = subject.current_user
        expect {
          post :create, valid_attributes, valid_session
        }.to change(Item, :count).by(1)
      end

      it "assign values to newly created item" do
        item = Item.new valid_attributes
        user = subject.current_user
        hash = {:format => :json}
        hash = hash.merge valid_attributes
        puts "POST REQUESTTTT", hash
        post :create, hash, valid_session
        item.creator = user
        result = JSON.parse(response.body)
        result.should include(
          "description" => valid_attributes[:description],
          "title" => valid_attributes[:title],
          "creator_id" => user.id
        )
      end
    end

  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested item" do
        item = Item.create! valid_attributes
        user = subject.current_user
        # Assuming there are no other items in the database, this
        # specifies that the Item created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Item.any_instance.should_receive(:update_attributes).with(
          {
            :description => "new desc", 
            :title => "new title"})
        new_attr = {
          :format => :json,
          :id => item.to_param,
          :description => "new desc",
          :title => "new title"
        }
        put :update, new_attr, valid_session
      end

      it "assigns the requested item as @item" do
        item = Item.create! valid_attributes
        user = subject.current_user
        new_attr = {
          :format => :json,
          :id => item.to_param,
          :description => "new desc",
          :title => "new title"
        }
        put :update, new_attr, valid_session
        result = JSON.parse(response.body)
        result.should include(
          "description" => valid_attributes[:description],
          "title" => valid_attributes[:title],
        )
      end

    end

  end

  describe "DELETE destroy" do
    login_user
    it "destroys the requested item when its creator is current user" do
      item = Item.new valid_attributes
      user = subject.current_user
      item.creator = user
      item.save

      expect {
        delete :destroy, {:format => :json, :id => item.to_param}, valid_session
      }.to change(Item, :count).by(-1)
    end

    it "destroys the requested item when its creator is not current user" do
      item = Item.new valid_attributes
      user = subject.current_user
      
      new_user = user.dup
      new_user.email = "newemail@test.com"
      new_user.save

      item.creator = new_user
      item.save

      puts item.to_json
      expect {
        delete :destroy, {:format => :json, :id => item.to_param}, valid_session
      }.to change(Item, :count).by(0)
    end

  end

end
